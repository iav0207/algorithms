See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     PASSED
Checkstyle:   FAILED (26 warnings)

Correctness:  19/27 tests passed
Memory:       8/8 tests passed
Timing:       42/42 tests passed

Aggregate score: 82.22%
[Compilation: 5%, API: 5%, Findbugs: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
 14K Mar 26 14:06 KdTree.java
2.7K Mar 26 14:06 PointSET.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------

================================================================


% checkstyle *.java
*-----------------------------------------------------------
PointSET.java:109:43: '{' is not preceded with whitespace. [WhitespaceAround]
PointSET.java:109:44: '{' is not followed by whitespace. [WhitespaceAround]
PointSET.java:109:44: '}' is not preceded with whitespace. [WhitespaceAround]
KdTree.java:5: Do not use .* in import statements. [AvoidStarImport]
KdTree.java:12: Do not use static imports. [AvoidStaticImport]
KdTree.java:21:13: Do not use the keyword 'abstract' in this course. [IllegalToken]
KdTree.java:24:9: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
KdTree.java:24:23: The instance (or static) variable 'value' must be private. [VisibilityModifier]
KdTree.java:34:37: The local (or parameter) variable 'value' has the same name as an instance variable. Use a different name. [HiddenField]
KdTree.java:79:9: Do not use the keyword 'abstract' in this course. [IllegalToken]
KdTree.java:131:9: Do not use the keyword 'abstract' in this course. [IllegalToken]
KdTree.java:148:16: Do not use the keyword 'abstract' in this course. [IllegalToken]
KdTree.java:148:47: The local (or parameter) variable 'value' has the same name as an instance variable. Use a different name. [HiddenField]
KdTree.java:160:16: Do not use the keyword 'abstract' in this course. [IllegalToken]
KdTree.java:160:50: The local (or parameter) variable 'value' has the same name as an instance variable. Use a different name. [HiddenField]
KdTree.java:162:16: Do not use the keyword 'abstract' in this course. [IllegalToken]
KdTree.java:164:37: The local (or parameter) variable 'key' has the same name as an instance variable. Use a different name. [HiddenField]
KdTree.java:266:16: The instance (or static) variable 'x1' must be private. [VisibilityModifier]
KdTree.java:266:20: The instance (or static) variable 'x2' must be private. [VisibilityModifier]
KdTree.java:266:24: The instance (or static) variable 'y1' must be private. [VisibilityModifier]
KdTree.java:266:28: The instance (or static) variable 'y2' must be private. [VisibilityModifier]
KdTree.java:267:15: The instance (or static) variable 'color' must be private. [VisibilityModifier]
KdTree.java:280:30: The local (or parameter) variable 'color' has the same name as an instance variable. Use a different name. [HiddenField]
KdTree.java:401:43: '{' is not preceded with whitespace. [WhitespaceAround]
KdTree.java:401:44: '{' is not followed by whitespace. [WhitespaceAround]
KdTree.java:401:44: '}' is not preceded with whitespace. [WhitespaceAround]
Checkstyle ends with 26 errors.

================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: Test size() by inserting n random points
        (size may be less than n because of duplicates)
  * 100000 random points in a 100000-by-100000 grid
  * 100000 random points in a 10000-by-10000 grid
    - failed on trial 18383 of 100000
    - student   size() = 18383
    - reference size() = 18382
  * 100000 random points in a 1000-by-1000 grid
    - failed on trial 1251 of 100000
    - student   size() = 1251
    - reference size() = 1250
  * 100000 random points in a 100-by-100 grid
    - failed on trial 76 of 100000
    - student   size() = 76
    - reference size() = 75
  * 100000 random points in a 10-by-10 grid
    - failed on trial 10 of 100000
    - student   size() = 10
    - reference size() = 9
==> FAILED

Test 2: Test isEmpty() by checking for n = 0, 1, and 2 points
  * 0 points
  * 1 point
  * 2 points
==> passed

Test 3: Insert n random points and check contains() for random query points
  * 100000 random points in a 100000-by-100000 grid
  * 100000 random points in a 10000-by-10000 grid
  * 100000 random points in a 1000-by-1000 grid
  * 100000 random points in a 100-by-100 grid
  * 100000 random points in a 10-by-10 grid
==> passed

Test 4: Insert n random points and check nearest() for random query points
  * 1000 random points in a 100000-by-100000 grid
    - failed on trial 1 of 1000
    - student   nearest()    = (0.44514, 0.199)
    - reference nearest()    = (0.74032, 0.20404)
    - student   distanceTo() = 0.3129513522897769
    - reference distanceTo() = 0.018241362339474602
  * 1000 random points in a 10000-by-10000 grid
    - failed on trial 1 of 1000
    - student   nearest()    = (0.4662, 0.9996)
    - reference nearest()    = (0.2721, 0.9876)
    - student   distanceTo() = 0.22110144730417303
    - reference distanceTo() = 0.029230805667993475
  * 1000 random points in a 1000-by-1000 grid
    - failed on trial 1 of 1000
    - student   nearest()    = (0.789, 0.657)
    - reference nearest()    = (0.963, 0.664)
    - student   distanceTo() = 0.16699999999999993
    - reference distanceTo() = 0.009899494936611674
  * 1000 random points in a 100-by-100 grid
    - failed on trial 1 of 1000
    - student   nearest()    = (0.55, 0.47)
    - reference nearest()    = (0.52, 0.44)
    - student   distanceTo() = 0.040000000000000036
    - reference distanceTo() = 0.03162277660168377
  * 1000 random points in a 10-by-10 grid
==> FAILED

Test 5: Insert n random points and check range() for random query rectangles
  * 1000 random rectangles and points in a 100000-by-100000 grid
  * 1000 random rectangles and points in a 10000-by-10000 grid
  * 1000 random rectangles and points in a 1000-by-1000 grid
  * 1000 random rectangles and points in a 100-by-100 grid
  * 1000 random rectangles and points in a 10-by-10 grid
==> passed

Test 6: Intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  * 10000 calls with random points in a 10000-by-10000 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    - failed on trial 8 of 10000
    - student   nearest()    = (0.7649, 0.3505)
    - reference nearest()    = (0.7318, 0.3803)
    - student   distanceTo() = 0.5854288769782373
    - reference distanceTo() = 0.5589018160643245
  * 10000 calls with random points in a 1000-by-1000 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    - failed on trial 22 of 10000
    - student   nearest()    = (0.661, 0.12)
    - reference nearest()    = (0.338, 0.502)
    - student   distanceTo() = 0.46150297940533386
    - reference distanceTo() = 0.3606272313622475
  * 10000 calls with random points in a 100-by-100 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    - failed on trial 24 of 10000
    - student   nearest()    = (0.44, 0.41)
    - reference nearest()    = (0.69, 0.38)
    - student   distanceTo() = 0.3306055050963308
    - reference distanceTo() = 0.0943398113205661
  * 10000 calls with random points in a 10-by-10 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    - failed on trial 20 of 10000
    - student   nearest()    = (0.8, 0.0)
    - reference nearest()    = (0.1, 0.3)
    - student   distanceTo() = 0.5
    - reference distanceTo() = 0.36055512754639896
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    - failed on trial 7 of 10000
    - student   size() = 2
    - reference size() = 1
==> FAILED

Test 7: Intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3=0, p4, p5, and p6, respectively
        (data structure with 0 points)
  * 1000 calls with random points in a 1000-by-1000 grid
    and probabilities 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
  * 1000 calls with random points in a 1000-by-1000 grid
    and probabilities 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
  * 1000 calls with random points in a 1000-by-1000 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
  * 1000 calls with random points in a 1000-by-1000 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
  * 1000 calls with random points in a 1000-by-1000 grid
    and probabilities 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
==> passed

Test 8: Test whether two PointSET objects can be created at the same time
==> passed


Total: 5/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an GRID-by-GRID grid means that it is of the form (i/GRID, j/GRID),
where i and j are integers between 0 and GRID

Running 19 total tests.

Test 1a: Insert n non-degenerate points and check size() after each insertion
  * 50000 random non-degenerate points in a 100000-by-100000 grid
  * 5000 random non-degenerate points in a 10000-by-10000 grid
  * 500 random non-degenerate points in a 1000-by-1000 grid
  * 50 random non-degenerate points in a 100-by-100 grid
  * 10 random non-degenerate points in a 10-by-10 grid
  * 1 random non-degenerate points in a 1-by-1 grid
==> passed

Test 1b: Insert n distinct points and check size() after each insertion
  * 100000 random distinct points in a 100000-by-100000 grid
  * 100000 random distinct points in a 10000-by-10000 grid
  * 100000 random distinct points in a 1000-by-1000 grid
  * 10000 random distinct points in a 100-by-100 grid
  * 100 random distinct points in a 10-by-10 grid
  * 1 random distinct points in a 1-by-1 grid
==> passed

Test 1c: Insert n general points and check size() after each insertion
  * 100000 random general points in a 100000-by-100000 grid
    - failed on trial 21955 of 100000
    - student   size() = 21955
    - reference size() = 21954
  * 100000 random general points in a 10000-by-10000 grid
    - failed on trial 30653 of 100000
    - student   size() = 30653
    - reference size() = 30652
  * 100000 random general points in a 1000-by-1000 grid
    - failed on trial 1442 of 100000
    - student   size() = 1442
    - reference size() = 1441
  * 100000 random general points in a 100-by-100 grid
    - failed on trial 83 of 100000
    - student   size() = 83
    - reference size() = 82
  * 100000 random general points in a 10-by-10 grid
    - failed on trial 19 of 100000
    - student   size() = 19
    - reference size() = 18
  * 10 random general points in a 1-by-1 grid
    - failed on trial 2 of 10
    - student   size() = 2
    - reference size() = 1
==> FAILED

Test 2: Test size() and isEmpty() for n = 0, 1, and 2 points
  * 0 points
  * 1 point
  * 2 points
==> passed

Test 3a: Insert n non-degenerate points and call contains() with random query points
  * 50000 random non-degenerate points in a 100000-by-100000 grid
  * 5000 random non-degenerate points in a 10000-by-10000 grid
  * 500 random non-degenerate points in a 1000-by-1000 grid
  * 50 random non-degenerate points in a 100-by-100 grid
  * 5 random non-degenerate points in a 10-by-10 grid
  * 1 random non-degenerate points in a 1-by-1 grid
==> passed

Test 3b: Insert n distinct points and call contains() with random query points
  * 100000 random distinct points in a 100000-by-100000 grid
  * 100000 random distinct points in a 10000-by-10000 grid
  * 100000 random distinct points in a 1000-by-1000 grid
  * 10000 random distinct points in a 100-by-100 grid
  * 100 random distinct points in a 10-by-10 grid
  * 1 random distinct points in a 1-by-1 grid
==> passed

Test 3c: Insert n general points and call contains() with random query points
  * 10000 random general points in a 1000-by-1000 grid
  * 10000 random general points in a 100-by-100 grid
  * 10000 random general points in a 10-by-10 grid
  * 10000 random general points in a 1-by-1 grid
==> passed

Test 4: Test whether two KdTree objects can be created at the same time
==> passed

Test 5a: Insert n non-degenerate points and call range() for n random query rectangles
  * 5000 random non-degenerate points and rectangles in a 100000-by-100000 grid
  * 5000 random non-degenerate points and rectangles in a 10000-by-10000 grid
  * 500 random non-degenerate points and rectangles in a 1000-by-1000 grid
  * 50 random non-degenerate points and rectangles in a 100-by-100 grid
  * 5 random non-degenerate points and rectangles in a 10-by-10 grid
==> passed

Test 5b: Insert n distinct points and call range() for n random query rectangles
  * 5000 random distinct points and rectangles in a 100000-by-100000 grid
  * 5000 random distinct points and rectangles in a 10000-by-10000 grid
  * 1000 random distinct points and rectangles in a 1000-by-1000 grid
  * 1000 random distinct points and rectangles in a 100-by-100 grid
  * 5 random distinct points and rectangles in a 10-by-10 grid
==> passed

Test 5c: Insert n general points and call range() for n random query rectangles
  * 5000 random general points and rectangles in a 10000-by-10000 grid
  * 5000 random general points and rectangles in a 1000-by-1000 grid
  * 5000 random general points and rectangles in a 100-by-100 grid
  * 5000 random general points and rectangles in a 10-by-10 grid
  * 5000 random general points and rectangles in a 1-by-1 grid
==> passed

Test 5d: Insert n points and call range() for tiny rectangles enclosing each point.
  * 4000 tiny rectangles and 4000 points in a 100000-by-100000 grid
  * 4000 tiny rectangles and 4000 points in a 10000-by-10000 grid
  * 4000 tiny rectangles and 4000 points in a 1000-by-1000 grid
  * 4000 tiny rectangles and 4000 points in a 100-by-100 grid
  * 4000 tiny rectangles and 4000 points in a 10-by-10 grid
==> passed

Test 6a: Insert n non-degenerate points and call nearest() with random query points
  * 50000 random non-degenerate points in a 100000-by-100000 grid
  * 5000 random non-degenerate points in a 10000-by-10000 grid
  * 500 random non-degenerate points in a 1000-by-1000 grid
  * 50 random non-degenerate points in a 100-by-100 grid
  * 5 random non-degenerate points in a 10-by-10 grid
==> passed

Test 6b: Insert n distinct points and call nearest() with random query points
  * 50000 random distinct points in a 100000-by-100000 grid
    java.lang.IllegalArgumentException: Invalid rectangle: 0.86776, 0.27533, 0.89229, 0.27389

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:41)
    KdTree$YNode.cutRect(KdTree.java:260)
    KdTree$Node.nearest(KdTree.java:100)
    KdTree$Node.nearest(KdTree.java:97)
    KdTree$Node.nearest(KdTree.java:95)
     ...
    KdTree$Node.nearest(KdTree.java:82)
    KdTree.nearest(KdTree.java:394)
    TestKdTree.testNearest(TestKdTree.java:316)
    TestKdTree.test6b(TestKdTree.java:363)
    TestKdTree.main(TestKdTree.java:890)

  * 10000 random distinct points in a 10000-by-10000 grid
    java.lang.IllegalArgumentException: Invalid rectangle: 0.5507, 0.6312, 0.5778, 0.6285

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:41)
    KdTree$YNode.cutRect(KdTree.java:260)
    KdTree$Node.nearest(KdTree.java:95)
    KdTree$Node.nearest(KdTree.java:97)
    KdTree$Node.nearest(KdTree.java:118)
     ...
    KdTree$Node.nearest(KdTree.java:82)
    KdTree.nearest(KdTree.java:394)
    TestKdTree.testNearest(TestKdTree.java:316)
    TestKdTree.test6b(TestKdTree.java:364)
    TestKdTree.main(TestKdTree.java:890)

  * 10000 random distinct points in a 1000-by-1000 grid
    java.lang.IllegalArgumentException: Invalid rectangle: 0.179, 0.712, 0.256, 0.705

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:41)
    KdTree$YNode.cutRect(KdTree.java:260)
    KdTree$Node.nearest(KdTree.java:100)
    KdTree$Node.nearest(KdTree.java:107)
    KdTree$Node.nearest(KdTree.java:118)
     ...
    KdTree$Node.nearest(KdTree.java:82)
    KdTree.nearest(KdTree.java:394)
    TestKdTree.testNearest(TestKdTree.java:316)
    TestKdTree.test6b(TestKdTree.java:365)
    TestKdTree.main(TestKdTree.java:890)

  * 5000 random distinct points in a 100-by-100 grid
    java.lang.IllegalArgumentException: Invalid rectangle: 0.87, 0.58, 0.82, 0.69

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:41)
    KdTree$XNode.cutRect(KdTree.java:212)
    KdTree$Node.nearest(KdTree.java:100)
    KdTree$Node.nearest(KdTree.java:121)
    KdTree$Node.nearest(KdTree.java:121)
     ...
    KdTree$Node.nearest(KdTree.java:82)
    KdTree.nearest(KdTree.java:394)
    TestKdTree.testNearest(TestKdTree.java:316)
    TestKdTree.test6b(TestKdTree.java:366)
    TestKdTree.main(TestKdTree.java:890)

  * 50 random distinct points in a 10-by-10 grid
    java.lang.IllegalArgumentException: Invalid rectangle: 0.4, 0.2, 0.3, 0.8

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:41)
    KdTree$XNode.cutRect(KdTree.java:212)
    KdTree$Node.nearest(KdTree.java:100)
    KdTree$Node.nearest(KdTree.java:97)
    KdTree$Node.nearest(KdTree.java:105)
     ...
    KdTree$Node.nearest(KdTree.java:82)
    KdTree.nearest(KdTree.java:394)
    TestKdTree.testNearest(TestKdTree.java:316)
    TestKdTree.test6b(TestKdTree.java:367)
    TestKdTree.main(TestKdTree.java:890)

==> FAILED

Test 6c: Insert n general points and call nearest() with random query points
  * 10000 random general points in a 1000-by-1000 grid
    java.lang.IllegalArgumentException: Invalid rectangle: 0.238, 0.113, 0.231, 0.189

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:41)
    KdTree$XNode.cutRect(KdTree.java:212)
    KdTree$Node.nearest(KdTree.java:95)
    KdTree$Node.nearest(KdTree.java:121)
    KdTree$Node.nearest(KdTree.java:118)
     ...
    KdTree$Node.nearest(KdTree.java:82)
    KdTree.nearest(KdTree.java:394)
    TestKdTree.testNearest(TestKdTree.java:316)
    TestKdTree.test6c(TestKdTree.java:374)
    TestKdTree.main(TestKdTree.java:893)

  * 10000 random general points in a 100-by-100 grid
    java.lang.IllegalArgumentException: Invalid rectangle: 0.52, 0.65, 0.51, 0.78

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:41)
    KdTree$XNode.cutRect(KdTree.java:212)
    KdTree$Node.nearest(KdTree.java:100)
    KdTree$Node.nearest(KdTree.java:107)
    KdTree$Node.nearest(KdTree.java:121)
     ...
    KdTree$Node.nearest(KdTree.java:82)
    KdTree.nearest(KdTree.java:394)
    TestKdTree.testNearest(TestKdTree.java:316)
    TestKdTree.test6c(TestKdTree.java:375)
    TestKdTree.main(TestKdTree.java:893)

  * 10000 random general points in a 10-by-10 grid
    - failed on trial 16 of 10000
    - student   nearest()    = (0.3, 0.4)
    - reference nearest()    = (0.3, 0.5)
    - student   distanceTo() = 0.09999999999999998
    - reference distanceTo() = 0.0
==> FAILED

Test 7a: Intermixed sequence of calls to insert(), isEmpty(), size(),
         contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 100000-by-100000 grid
     and probabilities (0.3, 0.05, 0.05, 0.1, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 10000-by-10000 grid
     and probabilities (0.3, 0.05, 0.05, 0.1, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 1000-by-1000 grid
     and probabilities (0.3, 0.05, 0.05, 0.1, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 100-by-100 grid
     and probabilities (0.3, 0.05, 0.05, 0.1, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 10-by-10 grid
     and probabilities (0.3, 0.05, 0.05, 0.1, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 1-by-1 grid
     and probabilities (0.3, 0.05, 0.05, 0.1, 0.2, 0.2)
==> passed

Test 7b: Intermixed sequence of calls to insert(), isEmpty(), size(),
         contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 100000-by-100000 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 10000-by-10000 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    java.lang.IllegalArgumentException: Invalid rectangle: 0.5381, 0.0326, 0.6786, 0.0314

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:41)
    KdTree$YNode.cutRect(KdTree.java:260)
    KdTree$Node.nearest(KdTree.java:95)
    KdTree$Node.nearest(KdTree.java:97)
    KdTree$Node.nearest(KdTree.java:105)
     ...
    KdTree$Node.nearest(KdTree.java:82)
    KdTree.nearest(KdTree.java:394)
    TestKdTree.testAll(TestKdTree.java:716)
    TestKdTree.test7b(TestKdTree.java:788)
    TestKdTree.main(TestKdTree.java:899)

  * 20000 calls with distinct points in a 1000-by-1000 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    java.lang.IllegalArgumentException: Invalid rectangle: 0.428, 0.804, 0.515, 0.793

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:41)
    KdTree$YNode.cutRect(KdTree.java:260)
    KdTree$Node.nearest(KdTree.java:95)
    KdTree$Node.nearest(KdTree.java:97)
    KdTree$Node.nearest(KdTree.java:121)
     ...
    KdTree$Node.nearest(KdTree.java:82)
    KdTree.nearest(KdTree.java:394)
    TestKdTree.testAll(TestKdTree.java:716)
    TestKdTree.test7b(TestKdTree.java:789)
    TestKdTree.main(TestKdTree.java:899)

  * 20000 calls with distinct points in a 100-by-100 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    java.lang.IllegalArgumentException: Invalid rectangle: 0.51, 0.61, 0.44, 0.63

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:41)
    KdTree$XNode.cutRect(KdTree.java:212)
    KdTree$Node.nearest(KdTree.java:95)
    KdTree$Node.nearest(KdTree.java:95)
    KdTree$Node.nearest(KdTree.java:105)
     ...
    KdTree$Node.nearest(KdTree.java:82)
    KdTree.nearest(KdTree.java:394)
    TestKdTree.testAll(TestKdTree.java:716)
    TestKdTree.test7b(TestKdTree.java:790)
    TestKdTree.main(TestKdTree.java:899)

  * 20000 calls with distinct points in a 10-by-10 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    java.lang.IllegalArgumentException: Invalid rectangle: 0.0, 0.8, 0.5, 0.7

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:41)
    KdTree$YNode.cutRect(KdTree.java:260)
    KdTree$Node.nearest(KdTree.java:95)
    KdTree$Node.nearest(KdTree.java:126)
    KdTree$Node.nearest(KdTree.java:121)
     ...
    KdTree$Node.nearest(KdTree.java:82)
    KdTree.nearest(KdTree.java:394)
    TestKdTree.testAll(TestKdTree.java:716)
    TestKdTree.test7b(TestKdTree.java:791)
    TestKdTree.main(TestKdTree.java:899)

  * 20000 calls with distinct points in a 1-by-1 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> FAILED

Test 7c: Intermixed sequence of calls to insert(), isEmpty(), size(),
         contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 100000-by-100000 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 10000-by-10000 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    java.lang.IllegalArgumentException: Invalid rectangle: 0.1207, 0.5231, 0.0752, 0.5383

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:41)
    KdTree$XNode.cutRect(KdTree.java:212)
    KdTree$Node.nearest(KdTree.java:95)
    KdTree$Node.nearest(KdTree.java:97)
    KdTree$Node.nearest(KdTree.java:95)
     ...
    KdTree$Node.nearest(KdTree.java:82)
    KdTree.nearest(KdTree.java:394)
    TestKdTree.testAll(TestKdTree.java:716)
    TestKdTree.test7c(TestKdTree.java:802)
    TestKdTree.main(TestKdTree.java:902)

  * 20000 calls with general points in a 1000-by-1000 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    java.lang.IllegalArgumentException: Invalid rectangle: 0.319, 0.224, 0.463, 0.176

    edu.princeton.cs.algs4.RectHV.<init>(RectHV.java:41)
    KdTree$YNode.cutRect(KdTree.java:260)
    KdTree$Node.nearest(KdTree.java:95)
    KdTree$Node.nearest(KdTree.java:97)
    KdTree$Node.nearest(KdTree.java:121)
     ...
    KdTree$Node.nearest(KdTree.java:82)
    KdTree.nearest(KdTree.java:394)
    TestKdTree.testAll(TestKdTree.java:716)
    TestKdTree.test7c(TestKdTree.java:803)
    TestKdTree.main(TestKdTree.java:902)

  * 20000 calls with general points in a 100-by-100 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 150 of 20000
    - student   size() = 49
    - reference size() = 48

  * 20000 calls with general points in a 10-by-10 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 32 of 20000
    - student   size() = 14
    - reference size() = 13

  * 20000 calls with general points in a 1-by-1 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 21 of 20000
    - student   size() = 11
    - reference size() = 4

==> FAILED

Test 8: Intermixed sequence of calls to insert(), isEmpty(), size(),
        contains(), range(), and nearest() with probabilities
        (p1=0, p2, p3, p4, p5, p6), respectively
        (data structure with 0 points)
  * 1000 calls with no points in a 1000-by-1000 grid
     and probabilities (0.0, 0.5, 0.5, 0.0, 0.0, 0.0)
  * 1000 calls with no points in a 1000-by-1000 grid
     and probabilities (0.0, 0.2, 0.2, 0.6, 0.0, 0.0)
  * 1000 calls with no points in a 1000-by-1000 grid
     and probabilities (0.0, 0.2, 0.2, 0.0, 0.6, 0.0)
  * 1000 calls with no points in a 1000-by-1000 grid
     and probabilities (0.0, 0.2, 0.2, 0.0, 0.0, 0.6)
  * 1000 calls with no points in a 1000-by-1000 grid
     and probabilities (0.0, 0.2, 0.2, 0.2, 0.2, 0.2)
==> passed


Total: 14/19 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Computing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes
================================================================



Computing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes
================================================================



Computing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          128                160
=> passed        2          232                288
=> passed        5          544                672
=> passed       10         1064               1312
=> passed       25         2624               3232
=> passed      100        10424              12832
=> passed      400        41624              51232
=> passed      800        83224             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 104.00 n + 24.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)
================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     893496
=> passed   320000    1047028
=> passed   640000     753885
=> passed  1280000     739629
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET



...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.