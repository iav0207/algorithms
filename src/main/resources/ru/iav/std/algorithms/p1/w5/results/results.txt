See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     PASSED
Checkstyle:   FAILED (26 warnings)

Correctness:  27/27 tests passed
Memory:       8/8 tests passed
Timing:       42/42 tests passed

Aggregate score: 100.00%
[Compilation: 5%, API: 5%, Findbugs: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
 14K Mar 26 15:23 KdTree.java
2.4K Mar 26 15:23 PointSET.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

% javac KdTree.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------

================================================================


% checkstyle *.java
*-----------------------------------------------------------
PointSET.java:101:43: '{' is not preceded with whitespace. [WhitespaceAround]
PointSET.java:101:44: '{' is not followed by whitespace. [WhitespaceAround]
PointSET.java:101:44: '}' is not preceded with whitespace. [WhitespaceAround]
KdTree.java:5: Do not use .* in import statements. [AvoidStarImport]
KdTree.java:12: Do not use static imports. [AvoidStaticImport]
KdTree.java:21:13: Do not use the keyword 'abstract' in this course. [IllegalToken]
KdTree.java:24:9: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
KdTree.java:24:23: The instance (or static) variable 'value' must be private. [VisibilityModifier]
KdTree.java:33:37: The local (or parameter) variable 'value' has the same name as an instance variable. Use a different name. [HiddenField]
KdTree.java:77:9: Do not use the keyword 'abstract' in this course. [IllegalToken]
KdTree.java:129:9: Do not use the keyword 'abstract' in this course. [IllegalToken]
KdTree.java:145:16: Do not use the keyword 'abstract' in this course. [IllegalToken]
KdTree.java:145:47: The local (or parameter) variable 'value' has the same name as an instance variable. Use a different name. [HiddenField]
KdTree.java:157:16: Do not use the keyword 'abstract' in this course. [IllegalToken]
KdTree.java:157:50: The local (or parameter) variable 'value' has the same name as an instance variable. Use a different name. [HiddenField]
KdTree.java:159:16: Do not use the keyword 'abstract' in this course. [IllegalToken]
KdTree.java:161:37: The local (or parameter) variable 'key' has the same name as an instance variable. Use a different name. [HiddenField]
KdTree.java:265:16: The instance (or static) variable 'x1' must be private. [VisibilityModifier]
KdTree.java:265:20: The instance (or static) variable 'x2' must be private. [VisibilityModifier]
KdTree.java:265:24: The instance (or static) variable 'y1' must be private. [VisibilityModifier]
KdTree.java:265:28: The instance (or static) variable 'y2' must be private. [VisibilityModifier]
KdTree.java:266:15: The instance (or static) variable 'color' must be private. [VisibilityModifier]
KdTree.java:279:30: The local (or parameter) variable 'color' has the same name as an instance variable. Use a different name. [HiddenField]
KdTree.java:400:43: '{' is not preceded with whitespace. [WhitespaceAround]
KdTree.java:400:44: '{' is not followed by whitespace. [WhitespaceAround]
KdTree.java:400:44: '}' is not preceded with whitespace. [WhitespaceAround]
Checkstyle ends with 26 errors.

================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointSET
*-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m

Test 1: Test size() by inserting n random points
        (size may be less than n because of duplicates)
  * 100000 random points in a 100000-by-100000 grid
  * 100000 random points in a 10000-by-10000 grid
  * 100000 random points in a 1000-by-1000 grid
  * 100000 random points in a 100-by-100 grid
  * 100000 random points in a 10-by-10 grid
==> passed

Test 2: Test isEmpty() by checking for n = 0, 1, and 2 points
  * 0 points
  * 1 point
  * 2 points
==> passed

Test 3: Insert n random points and check contains() for random query points
  * 100000 random points in a 100000-by-100000 grid
  * 100000 random points in a 10000-by-10000 grid
  * 100000 random points in a 1000-by-1000 grid
  * 100000 random points in a 100-by-100 grid
  * 100000 random points in a 10-by-10 grid
==> passed

Test 4: Insert n random points and check nearest() for random query points
  * 1000 random points in a 100000-by-100000 grid
  * 1000 random points in a 10000-by-10000 grid
  * 1000 random points in a 1000-by-1000 grid
  * 1000 random points in a 100-by-100 grid
  * 1000 random points in a 10-by-10 grid
==> passed

Test 5: Insert n random points and check range() for random query rectangles
  * 1000 random rectangles and points in a 100000-by-100000 grid
  * 1000 random rectangles and points in a 10000-by-10000 grid
  * 1000 random rectangles and points in a 1000-by-1000 grid
  * 1000 random rectangles and points in a 100-by-100 grid
  * 1000 random rectangles and points in a 10-by-10 grid
==> passed

Test 6: Intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  * 10000 calls with random points in a 10000-by-10000 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1000-by-1000 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 100-by-100 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 10-by-10 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
==> passed

Test 7: Intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3=0, p4, p5, and p6, respectively
        (data structure with 0 points)
  * 1000 calls with random points in a 1000-by-1000 grid
    and probabilities 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
  * 1000 calls with random points in a 1000-by-1000 grid
    and probabilities 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
  * 1000 calls with random points in a 1000-by-1000 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
  * 1000 calls with random points in a 1000-by-1000 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
  * 1000 calls with random points in a 1000-by-1000 grid
    and probabilities 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
==> passed

Test 8: Test whether two PointSET objects can be created at the same time
==> passed


Total: 8/8 tests passed!


================================================================
Testing correctness of KdTree
*-----------------------------------------------------------
In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an GRID-by-GRID grid means that it is of the form (i/GRID, j/GRID),
where i and j are integers between 0 and GRID

Running 19 total tests.

Test 1a: Insert n non-degenerate points and check size() after each insertion
  * 50000 random non-degenerate points in a 100000-by-100000 grid
  * 5000 random non-degenerate points in a 10000-by-10000 grid
  * 500 random non-degenerate points in a 1000-by-1000 grid
  * 50 random non-degenerate points in a 100-by-100 grid
  * 10 random non-degenerate points in a 10-by-10 grid
  * 1 random non-degenerate points in a 1-by-1 grid
==> passed

Test 1b: Insert n distinct points and check size() after each insertion
  * 100000 random distinct points in a 100000-by-100000 grid
  * 100000 random distinct points in a 10000-by-10000 grid
  * 100000 random distinct points in a 1000-by-1000 grid
  * 10000 random distinct points in a 100-by-100 grid
  * 100 random distinct points in a 10-by-10 grid
  * 1 random distinct points in a 1-by-1 grid
==> passed

Test 1c: Insert n general points and check size() after each insertion
  * 100000 random general points in a 100000-by-100000 grid
  * 100000 random general points in a 10000-by-10000 grid
  * 100000 random general points in a 1000-by-1000 grid
  * 100000 random general points in a 100-by-100 grid
  * 100000 random general points in a 10-by-10 grid
  * 10 random general points in a 1-by-1 grid
==> passed

Test 2: Test size() and isEmpty() for n = 0, 1, and 2 points
  * 0 points
  * 1 point
  * 2 points
==> passed

Test 3a: Insert n non-degenerate points and call contains() with random query points
  * 50000 random non-degenerate points in a 100000-by-100000 grid
  * 5000 random non-degenerate points in a 10000-by-10000 grid
  * 500 random non-degenerate points in a 1000-by-1000 grid
  * 50 random non-degenerate points in a 100-by-100 grid
  * 5 random non-degenerate points in a 10-by-10 grid
  * 1 random non-degenerate points in a 1-by-1 grid
==> passed

Test 3b: Insert n distinct points and call contains() with random query points
  * 100000 random distinct points in a 100000-by-100000 grid
  * 100000 random distinct points in a 10000-by-10000 grid
  * 100000 random distinct points in a 1000-by-1000 grid
  * 10000 random distinct points in a 100-by-100 grid
  * 100 random distinct points in a 10-by-10 grid
  * 1 random distinct points in a 1-by-1 grid
==> passed

Test 3c: Insert n general points and call contains() with random query points
  * 10000 random general points in a 1000-by-1000 grid
  * 10000 random general points in a 100-by-100 grid
  * 10000 random general points in a 10-by-10 grid
  * 10000 random general points in a 1-by-1 grid
==> passed

Test 4: Test whether two KdTree objects can be created at the same time
==> passed

Test 5a: Insert n non-degenerate points and call range() for n random query rectangles
  * 5000 random non-degenerate points and rectangles in a 100000-by-100000 grid
  * 5000 random non-degenerate points and rectangles in a 10000-by-10000 grid
  * 500 random non-degenerate points and rectangles in a 1000-by-1000 grid
  * 50 random non-degenerate points and rectangles in a 100-by-100 grid
  * 5 random non-degenerate points and rectangles in a 10-by-10 grid
==> passed

Test 5b: Insert n distinct points and call range() for n random query rectangles
  * 5000 random distinct points and rectangles in a 100000-by-100000 grid
  * 5000 random distinct points and rectangles in a 10000-by-10000 grid
  * 1000 random distinct points and rectangles in a 1000-by-1000 grid
  * 1000 random distinct points and rectangles in a 100-by-100 grid
  * 5 random distinct points and rectangles in a 10-by-10 grid
==> passed

Test 5c: Insert n general points and call range() for n random query rectangles
  * 5000 random general points and rectangles in a 10000-by-10000 grid
  * 5000 random general points and rectangles in a 1000-by-1000 grid
  * 5000 random general points and rectangles in a 100-by-100 grid
  * 5000 random general points and rectangles in a 10-by-10 grid
  * 5000 random general points and rectangles in a 1-by-1 grid
==> passed

Test 5d: Insert n points and call range() for tiny rectangles enclosing each point.
  * 4000 tiny rectangles and 4000 points in a 100000-by-100000 grid
  * 4000 tiny rectangles and 4000 points in a 10000-by-10000 grid
  * 4000 tiny rectangles and 4000 points in a 1000-by-1000 grid
  * 4000 tiny rectangles and 4000 points in a 100-by-100 grid
  * 4000 tiny rectangles and 4000 points in a 10-by-10 grid
==> passed

Test 6a: Insert n non-degenerate points and call nearest() with random query points
  * 50000 random non-degenerate points in a 100000-by-100000 grid
  * 5000 random non-degenerate points in a 10000-by-10000 grid
  * 500 random non-degenerate points in a 1000-by-1000 grid
  * 50 random non-degenerate points in a 100-by-100 grid
  * 5 random non-degenerate points in a 10-by-10 grid
==> passed

Test 6b: Insert n distinct points and call nearest() with random query points
  * 50000 random distinct points in a 100000-by-100000 grid
  * 10000 random distinct points in a 10000-by-10000 grid
  * 10000 random distinct points in a 1000-by-1000 grid
  * 5000 random distinct points in a 100-by-100 grid
  * 50 random distinct points in a 10-by-10 grid
==> passed

Test 6c: Insert n general points and call nearest() with random query points
  * 10000 random general points in a 1000-by-1000 grid
  * 10000 random general points in a 100-by-100 grid
  * 10000 random general points in a 10-by-10 grid
==> passed

Test 7a: Intermixed sequence of calls to insert(), isEmpty(), size(),
         contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with non-degenerate points in a 100000-by-100000 grid
     and probabilities (0.3, 0.05, 0.05, 0.1, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 10000-by-10000 grid
     and probabilities (0.3, 0.05, 0.05, 0.1, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 1000-by-1000 grid
     and probabilities (0.3, 0.05, 0.05, 0.1, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 100-by-100 grid
     and probabilities (0.3, 0.05, 0.05, 0.1, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 10-by-10 grid
     and probabilities (0.3, 0.05, 0.05, 0.1, 0.2, 0.2)
  * 20000 calls with non-degenerate points in a 1-by-1 grid
     and probabilities (0.3, 0.05, 0.05, 0.1, 0.2, 0.2)
==> passed

Test 7b: Intermixed sequence of calls to insert(), isEmpty(), size(),
         contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with distinct points in a 100000-by-100000 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 10000-by-10000 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 1000-by-1000 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 100-by-100 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 10-by-10 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with distinct points in a 1-by-1 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 7c: Intermixed sequence of calls to insert(), isEmpty(), size(),
         contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
  * 20000 calls with general points in a 100000-by-100000 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 10000-by-10000 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 1000-by-1000 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 100-by-100 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 10-by-10 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
  * 20000 calls with general points in a 1-by-1 grid
     and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
==> passed

Test 8: Intermixed sequence of calls to insert(), isEmpty(), size(),
        contains(), range(), and nearest() with probabilities
        (p1=0, p2, p3, p4, p5, p6), respectively
        (data structure with 0 points)
  * 1000 calls with no points in a 1000-by-1000 grid
     and probabilities (0.0, 0.5, 0.5, 0.0, 0.0, 0.0)
  * 1000 calls with no points in a 1000-by-1000 grid
     and probabilities (0.0, 0.2, 0.2, 0.6, 0.0, 0.0)
  * 1000 calls with no points in a 1000-by-1000 grid
     and probabilities (0.0, 0.2, 0.2, 0.0, 0.6, 0.0)
  * 1000 calls with no points in a 1000-by-1000 grid
     and probabilities (0.0, 0.2, 0.2, 0.0, 0.0, 0.6)
  * 1000 calls with no points in a 1000-by-1000 grid
     and probabilities (0.0, 0.2, 0.2, 0.2, 0.2, 0.2)
==> passed


Total: 19/19 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Computing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes
================================================================



Computing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes
================================================================



Computing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          128                160
=> passed        2          232                288
=> passed        5          544                672
=> passed       10         1064               1312
=> passed       25         2624               3232
=> passed      100        10424              12832
=> passed      400        41624              51232
=> passed      800        83224             102432
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 104.00 n + 24.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)
================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     860226
=> passed   320000     743764
=> passed   640000     657362
=> passed  1280000     617760
==> 4/4 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed   160000     307258
=> passed   320000     272028
=> passed   640000     302803
=> passed  1280000     239697
==> 4/4 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       3592
=> passed    20000       1554
=> passed    40000        759
==> 3/3 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
=> passed    10000       4508
=> passed    20000       2149
=> passed    40000        876
==> 3/3 tests passed

Total: 14/14 tests passed!


================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Inserting n points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=> passed   160000     923521               0.0              11.6              11.1               0.0
=> passed   320000    1031411               0.0              11.8              11.3               0.0
=> passed   640000    1148018               0.0              12.5              12.0               0.0
=> passed  1280000     865198               0.0              13.6              13.1               0.0
==> 4/4 tests passed

Performing contains() queries after inserting n points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=> passed    10000     509034               9.2               8.8               0.0
=> passed    20000     547236               9.8               9.3               0.0
=> passed    40000     538980              10.9              10.4               0.0
=> passed    80000     520640              11.0              10.5               0.0
=> passed   160000     475300              11.6              11.1               0.0
=> passed   320000     401059              12.5              12.0               0.0
=> passed   640000     373360              12.8              12.3               0.0
=> passed  1280000     354818              13.6              13.1               0.0
==> 8/8 tests passed

Performing range() queries after inserting n points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=> passed    10000     281341               0.0              31.1              50.1              12.1
=> passed    20000     363782               0.0              32.6              53.3              16.2
=> passed    40000     339195               0.0              39.3              63.1              14.1
=> passed    80000     300437               0.0              40.7              65.2              14.9
=> passed   160000     240828               0.0              42.5              70.9              20.4
=> passed   320000     130939               0.0              40.2              65.2              15.7
=> passed   640000     131440               0.0              43.3              70.7              19.2
=> passed  1280000     122407               0.0              47.0              74.8              14.2
==> 8/8 tests passed

Performing nearest() queries after inserting n points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=> passed    10000   237062                  51.5                    0.0                   142.6             137.6
=> passed    20000   260285                  56.5                    0.0                   156.2             152.4
=> passed    40000   207002                  66.1                    0.0                   186.5             179.4
=> passed    80000   186807                  67.4                    0.0                   187.8             187.7
=> passed   160000   169338                  72.9                    0.0                   207.5             202.5
=> passed   320000   128583                  75.7                    0.0                   215.2             213.3
=> passed   640000   119642                  78.7                    0.0                   223.4             222.4
=> passed  1280000    99308                  87.8                    0.0                   252.9             244.9
==> 8/8 tests passed

Total: 28/28 tests passed!


================================================================


